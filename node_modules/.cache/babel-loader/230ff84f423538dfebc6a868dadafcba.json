{"ast":null,"code":"/**\n * @remix-run/router v1.1.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let historyAction = (opts && opts.replace) === true || submission != null && isMutationMethod(submission.formMethod) ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result, opts && opts.replace === true);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult);\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, replace) {\n    var _window;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation; // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && formMethod && isMutationMethod(formMethod) && formEncType && formData) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData\n        }\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp) {\n    let {\n      requestContext\n    } = _temp === void 0 ? {} : _temp;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp2) {\n    let {\n      routeId,\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp3) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp3 === void 0 ? {} : _temp3;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","warning","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","isMutationMethod","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","_window","redirectLocation","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","_temp","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp2","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_temp3","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches"],"sources":["C:/Users/nelso/Desktop/jrun/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.1.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let historyAction = (opts && opts.replace) === true || submission != null && isMutationMethod(submission.formMethod) ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result, opts && opts.replace === true);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult);\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, replace) {\n    var _window;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation; // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && formMethod && isMutationMethod(formMethod) && formEncType && formData) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData\n        }\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp) {\n    let {\n      requestContext\n    } = _temp === void 0 ? {} : _temp;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp2) {\n    let {\n      routeId,\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp3) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp3 === void 0 ? {} : _temp3;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}